variables:
  # Change pip's cache directory to be inside the project directory.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

  TWINE_USERNAME: gitlab-ci-token
  TWINE_PASSWORD: $CI_JOB_TOKEN

stages:
  - build
  - examples_master
  - examples_pypi
  - tutorials_master
  - tutorials_pypi
  - use_cases
  - use_cases_detectors_master
  - use_cases_detectors_pypi
  - deploy

# Use for temporary storage for project dependencies(e.g. pypi packages...)
cache:
  paths:
    - .cache/pip

master_wheel:
  image: python:3.8
  stage: build
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
#    - pip install twine

    # Get source code
    - wget https://gitlab.com/esa/pyxel/-/archive/master/pyxel-master.zip
    - unzip pyxel-master

    # Create wheel (.whl) and source archive (.tar.gz) file.
    - cd pyxel-master
    - python setup.py sdist bdist_wheel

    # - twine upload --repository-url https:
    # - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

    # Send the wheel file to folder ~/dist
    - mv dist/ ..

  artifacts:
    paths:
      - dist/
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

exposure_master:
  image: python:${PYTHON}
  stage: examples_master
  needs:
    - master_wheel
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install `ls dist/*.whl`[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [exposure]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

exposure_pypi:
  image: python:${PYTHON}
  stage: examples_pypi
  needs: []
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install pyxel-sim[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [exposure]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

observation_master:
  image: python:${PYTHON}
  stage: examples_master
  needs:
    - master_wheel
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install `ls dist/*.whl`[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [observation_product,observation_product,observation_custom]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

observation_pypi:
  image: python:${PYTHON}
  needs: []
  stage: examples_pypi
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install pyxel-sim[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [observation_product,observation_sequential,observation_custom]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

calibration_master:
  image: python:${PYTHON}
  stage: examples_master
  needs:
    - master_wheel
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install `ls dist/*.whl`[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [calibration]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

calibration_pypi:
  image: python:${PYTHON}
  needs: []
  stage: examples_pypi
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install pyxel-sim[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [calibration]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

models_master:
  image: python:${PYTHON}
  stage: examples_master
  needs:
    - master_wheel
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install `ls dist/*.whl`[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [model_amplifier, model_inter_pixel]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

models_pypi:
  image: python:${PYTHON}
  needs: []
  stage: examples_pypi
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install pyxel-sim[all]

    - tox -e examples-${PIPELINE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        PIPELINE: [model_amplifier, model_inter_pixel]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

tutorials_master:
  image: python:${PYTHON}
  stage: tutorials_master
  needs:
    - master_wheel
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install `ls dist/*.whl`[all]

    - tox -e tutorials-${TUTORIAL}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        TUTORIAL: [0, 1, 2, 4, 5, 6, 7]
  rules:
    - if: '$FORCE_GITLAB_CI'

tutorials_pypi:
  image: python:${PYTHON}
  needs: []
  stage: tutorials_pypi
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install pyxel-sim[all]

    - tox -e tutorials-${TUTORIAL}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        TUTORIAL: [0, 1, 2, 4, 5, 6, 7]
  rules:
    - if: '$FORCE_GITLAB_CI'

use_cases_master:
  image: python:${PYTHON}
  stage: use_cases_detectors_master
  needs:
    - master_wheel
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install `ls dist/*.whl`[all]

    - tox -e use_cases-${USE_CASE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        USE_CASE: ["APD", "CCD", "CMOS", "HxRG"]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

use_cases_pypi:
  image: python:${PYTHON}
  needs: []
  stage: use_cases_detectors_pypi
  before_script:
    - pip install -U pip
    - pip install -U wheel setuptools tox
  script:
    # Install Pyxel
    - pip install pyxel-sim[all]

    - tox -e use_cases-${USE_CASE}-${MODE}
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8"]
        USE_CASE: ["APD", "CCD", "CMOS", "HxRG"]
        MODE: [cli, notebook]
  rules:
    - if: '$FORCE_GITLAB_CI'

# use_cases_py38:
#   image: python:3.8
#   stage: use_cases
#   needs:
#     - master_wheel
#   script:
#     # Install Pyxel
#     - pip install `ls dist/*.whl`[all]

#     - tox -e use_cases-${PIPELINE}-${MODE}
#   parallel:
#     matrix:
#       - PIPELINE: [flex]
#         MODE: [cli, notebook]
#   rules:
#     - if: '$FORCE_GITLAB_CI'

book_build:
  image: condaforge/mambaforge
  stage: build
  script:
    - free -h
    - mamba update -y -n base --channel conda-forge mamba

    # Create a new Conda environment
    - mamba create --prefix ./env --channel conda-forge pyxel-sim=2.1.1 jupyter-book=1.0.0 ipympl pydata-sphinx-theme=0.15.2
    - env/bin/python -m pip install lacosmic

    # Get current version of Pyxel and Jupyter Book
    - env/bin/python -c "import pyxel; pyxel.show_versions()"
    - env/bin/jupyter-book --version

    - env/bin/jupyter kernelspec list

    - env/bin/jupyter-book clean --all .
    - env/bin/jupyter-book build --verbose .

    - mkdir -p build_stable
    - mv _build/html build_stable/html

  artifacts:
    paths:
      - build_stable/

book_build_latest:
  image: python:3.11
  stage: build
  script:
    - free -h
    # Create a new virtual environment
    - python -m venv .venv
    - .venv/bin/python -m pip install -U pip

    # Install latest version of Pyxel
    - .venv/bin/python -m pip install "pyxel-sim[all] @ git+https://gitlab.com/esa/pyxel.git"
      "jupyter-book>=1" ipympl "pydata-sphinx-theme"
    - .venv/bin/python -m pip list

    # Get current version of Pyxel and Jupyter Book
    - .venv/bin/python -c "import pyxel; pyxel.show_versions()"
    - .venv/bin/jupyter-book --version

    - .venv/bin/jupyter kernelspec list

    # Build the documentation
    - .venv/bin/jupyter-book clean --all .
    - .venv/bin/jupyter-book build --verbose .

    - mkdir -p build_latest
    - mv _build/html build_latest/html

  artifacts:
    paths:
      - build_latest/

pages:
  stage: deploy
  image: busybox:latest
  script:
    - mv build_stable/html public
    - cp pyxel-logo.svg public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
